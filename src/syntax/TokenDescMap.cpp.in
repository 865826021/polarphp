// This source file is part of the polarphp.org open source project
//
// Copyright (c) 2017 - 2018 polarphp software foundation
// Copyright (c) 2017 - 2018 zzu_softboy <zzu_softboy@163.com>
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://polarphp.org/LICENSE.txt for license information
// See https://polarphp.org/CONTRIBUTORS.txt for the list of polarphp project authors
//
// Created by polarboy on 2019/05/09.

#include "polarphp/syntax/TokenKinds.h"
#include "polarphp/basic/adt/StringRef.h"

namespace polar::syntax {
namespace {

static const std::map<TokenKindType, TokenDescItemType> scg_tokenDescTable{
   __TOKEN_RECORDS__
};
} // anonymous namespace

TokenDescItemType retrieve_token_desc_entry(TokenKindType kind)
{
   if (scg_tokenDescTable.find(kind) == scg_tokenDescTable.end()) {
      kind = TokenKindType::T_UNKOWN_MARK;
   }
   return scg_tokenDescTable.at(kind);
}

TokenDescMap::const_iterator find_token_desc_entry(TokenKindType kind)
{
   return scg_tokenDescTable.find(kind);
}

TokenDescMap::const_iterator token_desc_map_end()
{
   return scg_tokenDescTable.end();
}

TokenCategory get_token_category(TokenKindType kind)
{
   TokenDescMap::const_iterator iter = scg_tokenDescTable.find(kind);
   assert(iter != scg_tokenDescTable.end());
   return std::get<2>(iter->second);
}

bool is_internal_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::Internal;
}

bool is_keyword_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::Keyword ||
          category == TokenCategory::DeclKeyword ||
          category == TokenCategory::StmtKeyword ||
          category == TokenCategory::ExprKeyword;
}

bool is_decl_keyword_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::DeclKeyword;
}
bool is_stmt_keyword_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::StmtKeyword;
}

bool is_expr_keyword_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::ExprKeyword;
}

bool is_punctuator_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::Punctuator;
}

bool is_misc_token(TokenKindType kind)
{
   TokenCategory category = get_token_category(kind);
   return category == TokenCategory::Misc;
}

} // polar::syntax
