<?php
// This source file is part of the polarphp.org open source project
//
// Copyright (c) 2017 - 2019 polarphp software foundation
// Copyright (c) 2017 - 2019 zzu_softboy <zzu_softboy@163.com>
// Licensed under Apache License v2.0 with Runtime Library Exception
//
// See https://polarphp.org/LICENSE.txt for license information
// See https://polarphp.org/CONTRIBUTORS.txt for the list of polarphp project authors
//
// Created by polarboy on 2019/10/29.

use Gyb\Syntax\Token\DeclKeyword;
use Gyb\Syntax\Token\ExprKeyword;
use Gyb\Syntax\Token\InternalKeyword;
use Gyb\Syntax\Token\Keyword;
use Gyb\Syntax\Token\Misc;
use Gyb\Syntax\Token\Punctuator;
use Gyb\Syntax\Token\StmtKeyword;

return array(
   new InternalKeyword('End', 'END', 'end of file', 0),
   new Keyword('Line', 'T_LINE', '__LINE__', 300),
   new Keyword('File', 'T_FILE', '__FILE__', 301),
   new Keyword('Dir', 'T_DIR','__DIR__', 302),
   new Keyword('ClassConst', 'T_CLASS_CONST', '__CLASS__', 303),
   new Keyword('TraitConst', 'T_TRAIT_CONST', '__TRAIT__', 304),
   new Keyword('MethodConst', 'T_METHOD_CONST', '__METHOD__', 305),
   new Keyword('FuncConst', 'T_FUNC_CONST', '__FUNCTION__', 306),
   new Keyword('NamespaceConst', 'T_NS_CONST', '__NAMESPACE__', 307),
   new DeclKeyword('Namespace', 'T_NAMESPACE', 'namespace', 308),
   new DeclKeyword('Class', 'T_CLASS', 'class', 309),
   new DeclKeyword('Trait', 'T_TRAIT', 'trait', 310),
   new DeclKeyword('Interface', 'T_INTERFACE', 'interface', 311),
   new DeclKeyword('Extends', 'T_EXTENDS', 'extends', 312),
   new DeclKeyword('Implements', 'T_IMPLEMENTS', 'implements', 313),
   new DeclKeyword('Function', 'T_FUNCTION', 'function', 314),
   new DeclKeyword('Fn', 'T_FN', 'fn', 315),
   new DeclKeyword('Const', 'T_CONST', 'const', 316),
   new DeclKeyword('Var', 'T_VAR', 'var', 317),
   new DeclKeyword('Use', 'T_USE', 'use', 318),
   new DeclKeyword('Insteadof', 'T_INSTEADOF', 'insteadof', 319),
   new DeclKeyword('As', 'T_AS', 'as', 320),
   new DeclKeyword('Global', 'T_GLOBAL', 'global', 321),
   new DeclKeyword('Static', 'T_STATIC', 'static', 322),
   new DeclKeyword('Abstract', 'T_ABSTRACT', 'abstract', 323),
   new DeclKeyword('Final', 'T_FINAL', 'final', 324),
   new DeclKeyword('Private', 'T_PRIVATE', 'private', 325),
   new DeclKeyword('Protected', 'T_PROTECTED', 'protected', 326),
   new DeclKeyword('Public', 'T_PUBLIC', 'public', 327),
   new DeclKeyword('List', 'T_LIST', 'list', 328),
   new DeclKeyword('Array', 'T_ARRAY', 'array', 329),
   new DeclKeyword('Callable', 'T_CALLABLE', 'callable', 330),
   new DeclKeyword('ThreadLocal', 'T_THREAD_LOCAL', 'thread_local', 331),
   new DeclKeyword('Module', 'T_MODULE', 'module', 332),
   new DeclKeyword('Package', 'T_PACKAGE', 'package', 333),
   new DeclKeyword('Async', 'T_ASYNC', 'async', 334),
   new DeclKeyword('Export', 'T_EXPORT', 'export', 335),
   new StmtKeyword('Defer', 'T_DEFER', 'defer', 336),
   new StmtKeyword('If', 'T_IF', 'if', 337),
   new StmtKeyword('ElseIf', 'T_ELSEIF', 'elseif', 338),
   new StmtKeyword('Else', 'T_ELSE', 'else', 339),
   new StmtKeyword('Echo', 'T_ECHO', 'echo', 340),
   new StmtKeyword('Do', 'T_DO', 'do', 341),
   new StmtKeyword('While', 'T_WHILE', 'while', 342),
   new StmtKeyword('For', 'T_FOR', 'for', 343),
   new StmtKeyword('Foreach', 'T_FOREACH', 'foreach', 344),
   new StmtKeyword('Switch', 'T_SWITCH', 'switch', 345),
   new StmtKeyword('Case', 'T_CASE', 'case', 346),
   new StmtKeyword('Default', 'T_DEFAULT', 'default', 347),
   new StmtKeyword('Break', 'T_BREAK', 'break', 348),
   new StmtKeyword('Continue', 'T_CONTINUE', 'continue', 349),
   new StmtKeyword('Fallthrough', 'T_FALLTHROUGH', 'fallthrough', 350),
   new StmtKeyword('Goto', 'T_GOTO', 'goto', 351),
   new StmtKeyword('Return', 'T_RETURN', 'return', 352),
   new StmtKeyword('Try', 'T_TRY', 'try', 353),
   new StmtKeyword('Catch', 'T_CATCH', 'catch', 354),
   new StmtKeyword('Finally', 'T_FINALLY', 'finally', 355),
   new StmtKeyword('Throw', 'T_THROW', 'throw', 356),
   new ExprKeyword('Unset', 'T_UNSET', 'unset', 357),
   new ExprKeyword('Isset', 'T_ISSET', 'isset', 358),
   new ExprKeyword('Empty', 'T_EMPTY', 'empty', 359),
   new ExprKeyword('HaltCompiler', 'T_HALT_COMPILER', '__halt_compiler', 360),
   new ExprKeyword('Eval', 'T_EVAL', 'eval', 361),
   new ExprKeyword('Include', 'T_INCLUDE', 'include', 362),
   new ExprKeyword('IncludeOnce', 'T_INCLUDE_ONCE', 'include_once', 363),
   new ExprKeyword('Require', 'T_REQUIRE', 'require', 364),
   new ExprKeyword('RequireOnce', 'T_REQUIRE_ONCE', 'require_once', 365),
   new ExprKeyword('LogicOr', 'T_LOGICAL_OR', 'or', 366),
   new ExprKeyword('LogicXor', 'T_LOGICAL_XOR', 'xor', 367),
   new ExprKeyword('LogicAnd', 'T_LOGICAL_AND', 'and', 368),
   new ExprKeyword('Print', 'T_PRINT', 'print', 369),
   new ExprKeyword('Yield', 'T_YIELD', 'yield', 370),
   new ExprKeyword('YieldFrom', 'T_YIELD_FROM', 'yield from', 371),
   new ExprKeyword('Instanceof', 'T_INSTANCEOF', 'instanceof', 372),
   new ExprKeyword('IntCast', 'T_INT_CAST', '(int)', 373),
   new ExprKeyword('DoubleCast', 'T_DOUBLE_CAST', '(double)', 374),
   new ExprKeyword('StringCast', 'T_STRING_CAST', '(string)', 375),
   new ExprKeyword('ArrayCast', 'T_ARRAY_CAST', '(array)', 376),
   new ExprKeyword('ObjectCast', 'T_OBJECT_CAST', '(object)', 377),
   new ExprKeyword('BoolCast', 'T_BOOL_CAST', '(bool)', 378),
   new ExprKeyword('UnsetCast', 'T_UNSET_CAST', '(unset)', 379),
   new ExprKeyword('New', 'T_NEW', 'new', 380),
   new ExprKeyword('Clone', 'T_CLONE', 'clone', 381),
   new ExprKeyword('Exit', 'T_EXIT', 'exit', 382),
   new ExprKeyword('Declare', 'T_DECLARE', 'declare', 382),
   new ExprKeyword('ClassReStatic', 'T_CLASS_REF_STATIC', 'static', 383),
   new ExprKeyword('ClassRefSelf', 'T_CLASS_REF_SELF', 'self', 384),
   new ExprKeyword('ClassRefParent', 'T_CLASS_REF_PARENT', 'parent', 385),
   new ExprKeyword('ObjRef', 'T_OBJ_REF', 'this', 386),
   new ExprKeyword('True', 'T_TRUE', 'true', 387),
   new ExprKeyword('False', 'T_FALSE', 'false', 388),
   new ExprKeyword('Null', 'T_NULL', 'null', 389),
   new ExprKeyword('Await', 'T_AWAIT', 'await', 390),
   new Punctuator('PlusSign', 'T_PLUS_SIGN', '+', 391),
   new Punctuator('MinusSign', 'T_MINUS_SIGN', '-', 392),
   new Punctuator('MulSign', 'T_MUL_SIGN', '*',393),
   new Punctuator('DivSign', 'T_DIV_SIGN', '/', 394),
   new Punctuator('ModSign', 'T_MOD_SIGN', '%', 395),
   new Punctuator('Equal', 'T_EQUAL', '=', 396),
   new Punctuator('StrConcat', 'T_STR_CONCAT', '.', 397),
   new Punctuator('PlusEqual', 'T_PLUS_EQUAL', '+=', 398),
   new Punctuator('MinusEqual', 'T_MINUS_EQUAL', '-=', 399),
   new Punctuator('MulEqual', 'T_MUL_EQUAL', '*=', 400),
   new Punctuator('DivEqual', 'T_DIV_EQUAL', '/=', 401),
   new Punctuator('StrConcatEqual', 'T_STR_CONCAT_EQUAL', '.=', 402),
   new Punctuator('ModEqual', 'T_MOD_EQUAL', '%=', 403),
   new Punctuator('AndEqual', 'T_AND_EQUAL', '&=', 404),
   new Punctuator('OrEqual', 'T_OR_EQUAL', '|=', 405),
   new Punctuator('XorEqual', 'T_XOR_EQUAL', '^=', 406),
   new Punctuator('ShiftLeftEqual', 'T_SL_EQUAL', '<<=', 407),
   new Punctuator('ShiftRightEqual', 'T_SR_EQUAL', '>>=', 408),
   new Punctuator('CoalesceEqual', 'T_COALESCE_EQUAL', '??=', 409),
   new Punctuator('BooleanOr', 'T_BOOLEAN_OR', '||', 410),
   new Punctuator('BooleanAnd', 'T_BOOLEAN_AND', '&&', 411),
   new Punctuator('IsEqual', 'T_IS_EQUAL', '==', 412),
   new Punctuator('IsNotEqual', 'T_IS_NOT_EQUAL', '!=', 413),
   new Punctuator('IsIdentical', 'T_IS_IDENTICAL', '===', 414),
   new Punctuator('IsNotIdentical', 'T_IS_NOT_IDENTICAL', '!==', 415),
   new Punctuator('IsSmaller', 'T_IS_SMALLER', '<', 416),
   new Punctuator('IsSmallerOrEqual', 'T_IS_SMALLER_OR_EQUAL', '<=', 417),
   new Punctuator('IsGreaterOrEqual', 'T_IS_GREATER_OR_EQUAL', '>=', 418),
   new Punctuator('IsGreater', 'T_IS_GREATER', '>', 419),
   new Punctuator('Spaceship', 'T_SPACESHIP', '<=>', 420),
   new Punctuator('ShiftLeft', 'T_SL', '<<', 421),
   new Punctuator('ShiftRight', 'T_SR', '>>', 422),
   new Punctuator('Inc', 'T_INC', '++', 423),
   new Punctuator('Dec', 'T_DEC', '--', 424),
   new Punctuator('NamespaceSeparator', 'T_NS_SEPARATOR', '\\', 425),
   new Punctuator('Ellipsis', 'T_ELLIPSIS', '...', 426),
   new Punctuator('Coalesce', 'T_COALESCE', '??', 427),
   new Punctuator('Pow', 'T_POW', '**', 428),
   new Punctuator('PowEqual', 'T_POW_EQUAL', '**=', 429),
   new Punctuator('ObjectOperator', 'T_OBJECT_OPERATOR', '->', 430),
   new Punctuator('DoubleArrow', 'T_DOUBLE_ARROW', '=>', 431),
   new Punctuator('DollarOpenCurlyBraces', 'T_DOLLAR_OPEN_CURLY_BRACES', '${', 432),
   new Punctuator('CurlyOpen', 'T_CURLY_OPEN', '{$', 433),
   new Punctuator('PaamayimNekudotayim', 'T_PAAMAYIM_NEKUDOTAYIM', '::', 434),
   new Punctuator('LeftParen', 'T_LEFT_PAREN', '(', 435),
   new Punctuator('RightParen', 'T_RIGHT_PAREN', ')', 436),
   new Punctuator('LeftBrace', 'T_LEFT_BRACE', '{', 437),
   new Punctuator('RightBrace', 'T_RIGHT_BRACE', '}', 438),
   new Punctuator('LeftSquareBracket', 'T_LEFT_SQUARE_BRACKET', '[', 439),
   new Punctuator('RightSquareBracket', 'T_RIGHT_SQUARE_BRACKET', ']', 440),
   new Punctuator('LeftAngle', 'T_LEFT_ANGLE', '<', 441),
   new Punctuator('RightAngle', 'T_RIGHT_ANGLE', '>', 442),
   new Punctuator('Comma', 'T_COMMA', ',', 443),
   new Punctuator('Colon', 'T_COLON', ':', 444),
   new Punctuator('Semicolon', 'T_SEMICOLON', ';', 445),
   new Punctuator('Backtick', 'T_BACKTICK', '`', 446),
   new Punctuator('SingleStrQuote', 'T_SINGLE_QUOTE', '\'', 447),
   new Punctuator('DoubleStrQuote', 'T_DOUBLE_QUOTE', '"', 448),
   new Punctuator('VerticalBar', 'T_VBAR', '|', 449),
   new Punctuator('Caret', 'T_CARET', '^', 450),
   new Punctuator('ExclamationMark', 'T_EXCLAMATION_MARK', '!', 451),
   new Punctuator('Tilde', 'T_TILDE', '~', 452),
   new Punctuator('Dollar', 'T_DOLLAR_SIGN', '$', 453),
   new Punctuator('QuestionMark', 'T_QUESTION_MARK', '?', 454),
   new Punctuator('ErrorSuppressSign', 'T_ERROR_SUPPRESS_SIGN', '@', 455),
   new Punctuator('Ampersand', 'T_AMPERSAND', '&', 456),
   new Misc('LNumber', 'T_LNUMBER', 'integer number', 457),
   new Misc('DNumber', 'T_DNUMBER', 'floating-point number', 458),
   new Misc('IdentifierString', 'T_IDENTIFIER_STRING', 'identifier', 459),
   new Misc('Variable', 'T_VARIABLE', 'variable', 460),
   new Misc('EncapsedAndWhitespace', 'T_ENCAPSED_AND_WHITESPACE', 'quoted-string and whitespace', 461),
   new Misc('ConstantEncapsedString', 'T_CONSTANT_ENCAPSED_STRING', 'quoted-string', 462),
   new Misc('StringVarName', 'T_STRING_VARNAME', 'variable name', 463),
   new Misc('NumString', 'T_NUM_STRING', 'number', 464),
   new Misc('WhiteSpace', 'T_WHITESPACE', 'whitespace', 465),
   new Misc('PrefixOperator','T_PREFIX_OPERATOR', 'prefix operator', 466),
   new Misc('PostfixOperator', 'T_POSTFIX_OPERATOR', 'postfix operator', 467),
   new Misc('BinaryOperator', 'T_BINARY_OPERATOR', 'binary operator', 468),
   new Misc('Comment', 'T_COMMENT', 'comment', 469),
   new Misc('DocComment', 'T_DOC_COMMENT', 'doc comment', 470),
   new Misc('OpenTag', 'T_OPEN_TAG', 'open tag', 471),
   new Misc('OpenTagWithEcho', 'T_OPEN_TAG_WITH_ECHO', 'open tag with echo', 472),
   new Misc('CloseTag', 'T_CLOSE_TAG', 'close tag', 473),
   new Misc('StartHeredoc', 'T_START_HEREDOC', 'heredoc start', 474),
   new Misc('EndHereDoc', 'T_END_HEREDOC', 'heredoc end', 475),
   new Misc('Error', 'T_ERROR', 'error', 476),
   new Misc('Unknown', 'T_UNKNOWN_MARK', 'unknown token', 477),
);